{"version":3,"sources":["quotes-animation.js"],"names":["document","addEventListener","observer","IntersectionObserver","entries","filter","el","isIntersecting","forEach","target","elem","started","Date","now","originalText","innerText","randomText","replace","String","fromCharCode","Math","floor","random","shuffledIndices","Array","length","fill","map","_","i","sort","lastProcessedIndex","requestAnimationFrame","an","d","rightIndex","ceil","slice","animateBlock","unobserve","quote","getElementsByTagName","observe"],"mappings":"AAoDAA,SAASC,iBAAiB,mBApDE,KACxB,MAwCMC,EAAW,IAAIC,qBAAqB,CAACC,EAASF,KAChDE,EAAQC,OAAOC,GAAMA,EAAGC,gBAAgBC,QAAQ,EAAEC,OAAAA,OAvCtD,SAAsBC,GAClB,MAAMC,EAAUC,KAAKC,MACfC,EAAeJ,EAAKK,UAE1B,IAAIC,EAAaF,EAAaG,QAAQ,MAAO,IAAMC,OAAOC,aAAa,GAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,YAC9FZ,EAAKK,UAAYC,EAEjB,IAAIO,EAAkB,IAAKC,MAAMV,EAAaW,QACzCC,KAAK,GACLC,IAAI,CAACC,EAAGC,IAAMA,GACdC,KAAK,IAAMV,KAAKE,SAAW,IAG5BS,EAAqB,EAqBzBC,uBAnBA,SAASC,IACL,MAAMC,GAAKtB,KAAKC,MAAQF,GAlBf,KAmBHwB,EAAaf,KAAKgB,KAAKF,EAAIlB,EAAWS,QAE5CF,EACKc,MAAMN,EAAoBI,GAC1B3B,QACIqB,GACGb,EAAaA,EAAWqB,MAAM,EAAGR,GAAKf,EAAae,GAAKb,EAAWqB,MAAMR,EAAI,IAGzFnB,EAAKK,UAAYC,EAEjBe,EAAqBI,EAEjBJ,EAAqBR,EAAgBE,QACrCO,sBAAsBC,MAS1BK,CAAa7B,GACbP,EAASqC,UAAU9B,OAG3B,IAAK,IAAI+B,KAASxC,SAASyC,qBAAqB,cAC5CvC,EAASwC,QAAQF","file":"../src/js/quotes-animation.js","sourcesContent":["const initQuotesAnimation = () => {\n    const duration = 1500;\n\n    function animateBlock(elem) {\n        const started = Date.now();\n        const originalText = elem.innerText;\n\n        let randomText = originalText.replace(/\\S/g, () => String.fromCharCode(0x20 + Math.floor(Math.random() * (0x24f - 0x20))));\n        elem.innerText = randomText;\n\n        let shuffledIndices = (new Array(originalText.length))\n            .fill(1)\n            .map((_, i) => i)\n            .sort(() => Math.random() - .5);\n\n\n        let lastProcessedIndex = 0;\n\n        function an() {\n            const d = (Date.now() - started) / duration;\n            const rightIndex = Math.ceil(d * randomText.length);\n\n            shuffledIndices\n                .slice(lastProcessedIndex, rightIndex)\n                .forEach(\n                    (i) =>\n                        randomText = randomText.slice(0, i) + originalText[i] + randomText.slice(i + 1)\n                );\n\n            elem.innerText = randomText;\n\n            lastProcessedIndex = rightIndex;\n\n            if (lastProcessedIndex < shuffledIndices.length)\n                requestAnimationFrame(an)\n        }\n\n        requestAnimationFrame(an)\n    }\n\n\n    const observer = new IntersectionObserver((entries, observer) => {\n        entries.filter(el => el.isIntersecting).forEach(({target}) => {\n            animateBlock(target);\n            observer.unobserve(target)\n        })\n    });\n    for (let quote of document.getElementsByTagName('blockquote')) {\n        observer.observe(quote)\n    }\n};\n\ndocument.addEventListener('DOMContentLoaded', initQuotesAnimation);"]}